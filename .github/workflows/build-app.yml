name: Build Mobile App

on:
  repository_dispatch:
    types: [build_mobile_app]

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  build:
    name: Build Mobile App
    runs-on: ubuntu-22.04
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    - name: üîç Fetch build configuration from API
      id: fetch-config
      run: |
        echo "üì° Fetching configuration for build ID: ${{ github.event.client_payload.build_id }}"
        
        # API Ìò∏Ï∂úÌïòÏó¨ ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
        CONFIG_URL="https://system.withcookie.com/api/app-builder/github/config/${{ github.event.client_payload.build_id }}"
        echo "üîó API URL: $CONFIG_URL"
        
        # curlÎ°ú API Ìò∏Ï∂ú Î∞è ÏùëÎãµ Ï†ÄÏû•
        HTTP_STATUS=$(curl -s -w "%{http_code}" -o build_config.json "$CONFIG_URL")
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Successfully fetched build configuration"
          cat build_config.json
          
          # JSON ÌååÏã±ÌïòÏó¨ ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú ÏÑ§Ï†ï
          echo "APP_NAME=$(jq -r '.app_name // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$(jq -r '.package_name // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "APP_URL=$(jq -r '.app_url // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$(jq -r '.version_name // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$(jq -r '.version_code // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "PLATFORM=$(jq -r '.platform // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "BUILD_TYPE=$(jq -r '.build_type // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "PRIMARY_COLOR=$(jq -r '.primary_color // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "ICON_URL=$(jq -r '.icon_url // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "FIREBASE_CONFIG_URL=$(jq -r '.firebase_config_url // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "KEYSTORE_URL=$(jq -r '.keystore_url // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "KEYSTORE_PASSWORD=$(jq -r '.keystore_password // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "KEY_ALIAS=$(jq -r '.key_alias // empty' build_config.json)" >> $GITHUB_OUTPUT
          echo "KEY_PASSWORD=$(jq -r '.key_password // empty' build_config.json)" >> $GITHUB_OUTPUT
          
          echo "CONFIG_FETCHED=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Failed to fetch configuration (HTTP $HTTP_STATUS), using client_payload values"
          echo "CONFIG_FETCHED=false" >> $GITHUB_OUTPUT
        fi
    
    - name: üìã Display build configuration
      run: |
        echo "üîß Build Configuration:"
        echo "  Build ID: ${{ github.event.client_payload.build_id || 'test-build' }}"
        echo "  App Name: ${{ steps.fetch-config.outputs.APP_NAME || github.event.client_payload.app_name || 'TestApp' }}"
        echo "  Package Name: ${{ steps.fetch-config.outputs.PACKAGE_NAME || github.event.client_payload.package_name || 'com.test.app' }}"
        echo "  Platform: ${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}"
        echo "  Build Type: ${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type || 'apk' }}"
        echo "  Base URL: ${{ steps.fetch-config.outputs.APP_URL || github.event.client_payload.base_url || github.event.client_payload.app_url || 'https://test.com' }}"
        echo "  Version Name: ${{ steps.fetch-config.outputs.VERSION_NAME || github.event.client_payload.version_name || '1.0.0' }}"
        echo "  Version Code: ${{ steps.fetch-config.outputs.VERSION_CODE || github.event.client_payload.version_code || '1' }}"
        echo "  Primary Color: ${{ steps.fetch-config.outputs.PRIMARY_COLOR || github.event.client_payload.primary_color || '#2F80ED' }}"
        echo "  Event: ${{ github.event_name }}"
        echo "  Config Source: ${{ steps.fetch-config.outputs.CONFIG_FETCHED == 'true' && 'API' || 'client_payload' }}"
    
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    # Android Ï†ÑÏö© ÏÑ§Ï†ï
    - name: ‚òï Setup JDK (Android)
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android') == 'android'
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: ü§ñ Setup Android SDK (Android)
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android') == 'android'
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        ndk: 25.1.8937393
    
    # iOS Ï†ÑÏö© ÏÑ§Ï†ï
    - name: üçé Setup Xcode (iOS)
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform) == 'ios'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: üçé Setup CocoaPods (iOS)
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform) == 'ios'
      uses: maxim-lobanov/setup-cocoapods@v1
      with:
        version: latest
    
    # Í≥µÌÜµ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
    - name: üì¶ Install dependencies
      run: |
        # NPM Î†àÏßÄÏä§Ìä∏Î¶¨ ÏÑ§Ï†ï Î∞è Ïû¨ÏãúÎèÑ ÏÑ§Ï†ï
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set maxsockets 5
        
        # Ï∫êÏãú Ï†ïÎ¶¨
        npm cache clean --force
        
        # ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò (Ïû¨ÏãúÎèÑ Î°úÏßÅ Ìè¨Ìï®)
        for i in 1 2 3; do
          echo "üì¶ Installation attempt $i..."
          npm install --verbose && break || {
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed after 3 attempts"
              exit 1
            fi
            echo "‚è≥ Retrying in 10 seconds..."
            sleep 10
          }
        done
        
        # Sharp Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨Ïö© (ÏïÑÏù¥ÏΩò ÏÉùÏÑ±)
        npm install sharp || echo "‚ö†Ô∏è Sharp installation failed, continuing..."
    
    # Ïï± ÏÑ§Ï†ï Íµ¨ÏÑ±
    - name: üîß Configure app settings
      env:
        BUILD_ID: ${{ github.event.client_payload.build_id || 'test-build' }}
        APP_NAME: ${{ steps.fetch-config.outputs.APP_NAME || github.event.client_payload.app_name || 'TestApp' }}
        PACKAGE_NAME: ${{ steps.fetch-config.outputs.PACKAGE_NAME || github.event.client_payload.package_name || 'com.test.app' }}
        PLATFORM: ${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}
        BASE_URL: ${{ steps.fetch-config.outputs.APP_URL || github.event.client_payload.base_url || github.event.client_payload.app_url || 'https://withcookie.com' }}
        APP_ICON_URL: ${{ steps.fetch-config.outputs.ICON_URL || github.event.client_payload.icon_url || github.event.client_payload.app_icon_url }}
        FIREBASE_CONFIG_URL: ${{ steps.fetch-config.outputs.FIREBASE_CONFIG_URL || github.event.client_payload.firebase_config_url }}
        KEYSTORE_URL: ${{ steps.fetch-config.outputs.KEYSTORE_URL || github.event.client_payload.keystore_url }}
        KEYSTORE_PASSWORD: ${{ steps.fetch-config.outputs.KEYSTORE_PASSWORD || github.event.client_payload.keystore_password }}
        KEY_ALIAS: ${{ steps.fetch-config.outputs.KEY_ALIAS || github.event.client_payload.key_alias }}
        KEY_PASSWORD: ${{ steps.fetch-config.outputs.KEY_PASSWORD || github.event.client_payload.key_password }}
        BUILD_TYPE: ${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type || 'apk' }}
        VERSION_CODE: ${{ steps.fetch-config.outputs.VERSION_CODE || github.event.client_payload.version_code || '1' }}
        VERSION_NAME: ${{ steps.fetch-config.outputs.VERSION_NAME || github.event.client_payload.version_name || '1.0.0' }}
        BUILD_NUMBER: ${{ steps.fetch-config.outputs.VERSION_CODE || github.event.client_payload.build_number || github.event.client_payload.version_code || '1' }}
        MARKETING_VERSION: ${{ steps.fetch-config.outputs.VERSION_NAME || github.event.client_payload.marketing_version || github.event.client_payload.version_name || '1.0.0' }}
        PRIMARY_COLOR: ${{ steps.fetch-config.outputs.PRIMARY_COLOR || github.event.client_payload.primary_color }}
      run: |
        node scripts/configure-app.js
    
    # Android ÎπåÎìú
    - name: ü§ñ Build Android App
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android') == 'android'
      env:
        BUILD_TYPE: ${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type || 'apk' }}
        BUILD_MODE: release
        APP_NAME: ${{ steps.fetch-config.outputs.APP_NAME || github.event.client_payload.app_name || 'TestApp' }}
        PACKAGE_NAME: ${{ steps.fetch-config.outputs.PACKAGE_NAME || github.event.client_payload.package_name || 'com.test.app' }}
        VERSION_CODE: ${{ steps.fetch-config.outputs.VERSION_CODE || github.event.client_payload.version_code || '1' }}
        VERSION_NAME: ${{ steps.fetch-config.outputs.VERSION_NAME || github.event.client_payload.version_name || '1.0.0' }}
        KEYSTORE_URL: ${{ steps.fetch-config.outputs.KEYSTORE_URL || github.event.client_payload.keystore_url }}
        KEYSTORE_PASSWORD: ${{ steps.fetch-config.outputs.KEYSTORE_PASSWORD || github.event.client_payload.keystore_password }}
      run: |
        chmod +x scripts/build-android.sh
        scripts/build-android.sh
    
    # iOS ÎπåÎìú
    - name: üçé Build iOS App
      if: (steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform) == 'ios'
      env:
        BUILD_MODE: release
        APP_NAME: ${{ steps.fetch-config.outputs.APP_NAME || github.event.client_payload.app_name }}
        PACKAGE_NAME: ${{ steps.fetch-config.outputs.PACKAGE_NAME || github.event.client_payload.package_name }}
        BUILD_NUMBER: ${{ steps.fetch-config.outputs.VERSION_CODE || github.event.client_payload.build_number || github.event.client_payload.version_code || '1' }}
        MARKETING_VERSION: ${{ steps.fetch-config.outputs.VERSION_NAME || github.event.client_payload.marketing_version || github.event.client_payload.version_name || '1.0.0' }}
      run: |
        chmod +x scripts/build-ios.sh
        scripts/build-ios.sh
    
    # ÎπåÎìú Í≤∞Í≥ºÎ¨º ÏóÖÎ°úÎìú Ï§ÄÎπÑ
    - name: üì¶ Prepare build artifacts
      id: prepare-artifacts
      run: |
        PLATFORM="${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}"
        BUILD_TYPE="${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type || 'apk' }}"
        
        if [ "$PLATFORM" = "android" ]; then
          if [ "$BUILD_TYPE" = "aab" ]; then
            BUILD_FILE=$(find android/app/build/outputs/bundle -name "*.aab" | head -1)
          else
            BUILD_FILE=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
          fi
        else
          BUILD_FILE=$(find ios/build -name "*.ipa" | head -1)
        fi
        
        if [ -f "$BUILD_FILE" ]; then
          echo "build_file=$BUILD_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ Build file found: $BUILD_FILE"
          ls -la "$BUILD_FILE"
        else
          echo "‚ùå Build file not found"
          exit 1
        fi
    
    # Îã§Ïö¥Î°úÎìú URL ÏÉùÏÑ± Î∞è Ï†ÑÎã¨
    - name: üîó Generate download URL
      id: generate-url
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        BUILD_ID: ${{ github.event.client_payload.build_id || 'test-build' }}
        PLATFORM: ${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}
        BUILD_TYPE: ${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type || 'apk' }}
        S3_UPLOAD_URL: ${{ github.event.client_payload.s3_upload_url }}
        ARTIFACT_NAME: build-${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}-${{ github.event.client_payload.build_id || 'test-build' }}
      run: |
        echo "üì• Generating download information..."
        node scripts/generate-artifact-url.js
    
    # S3 ÏóÖÎ°úÎìú ÏãúÎèÑ (ÏïïÏ∂ï ÌõÑ ÏóÖÎ°úÎìú)
    - name: ‚òÅÔ∏è Upload to S3 with Compression
      id: s3-upload
      continue-on-error: true
      env:
        BUILD_ID: ${{ github.event.client_payload.build_id }}
        PLATFORM: ${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform }}
        BUILD_TYPE: ${{ steps.fetch-config.outputs.BUILD_TYPE || github.event.client_payload.build_type }}
        S3_UPLOAD_URL: ${{ github.event.client_payload.s3_upload_url }}
        BUILD_FILE: ${{ steps.prepare-artifacts.outputs.build_file }}
        REFRIGERATOR_UNLIMITED_KEY: ${{ secrets.REFRIGERATOR_UNLIMITED_KEY || 'UNLIMITED2024' }}
      run: |
        if [ -f "$BUILD_FILE" ]; then
          # ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
          FILE_SIZE_MB=$(du -m "$BUILD_FILE" | cut -f1)
          FILE_SIZE_BYTES=$(stat -c%s "$BUILD_FILE" 2>/dev/null || stat -f%z "$BUILD_FILE" 2>/dev/null || echo "0")
          echo "üìè Original file size: ${FILE_SIZE_MB}MB"
          
          echo "üóúÔ∏è Attempting compressed upload to S3..."
          UPLOAD_OUTPUT=$(node scripts/upload-compressed.js 2>&1)
          UPLOAD_STATUS=$?
          echo "$UPLOAD_OUTPUT"
          
          if [ $UPLOAD_STATUS -eq 0 ]; then
            # Extract URL from output (looking for "üîó Download URL:" line)
            ARTIFACT_URL=$(echo "$UPLOAD_OUTPUT" | grep "üîó Download URL:" | sed 's/.*üîó Download URL: //')
            if [ -n "$ARTIFACT_URL" ]; then
              echo "‚úÖ Extracted artifact URL: $ARTIFACT_URL"
              echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
              echo "artifact_size=$FILE_SIZE_BYTES" >> $GITHUB_OUTPUT
              echo "upload_success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Upload succeeded but couldn't extract URL"
              echo "upload_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Compressed upload failed, trying regular upload..."
            if [ "$FILE_SIZE_MB" -le 20 ]; then
              echo "‚úÖ File is small enough for regular Refrigerator upload"
              UPLOAD_OUTPUT=$(node scripts/upload-to-s3.js 2>&1)
              UPLOAD_STATUS=$?
              echo "$UPLOAD_OUTPUT"
              
              if [ $UPLOAD_STATUS -eq 0 ]; then
                # Extract URL from output (looking for "üìÑ Build file URL:" line)
                ARTIFACT_URL=$(echo "$UPLOAD_OUTPUT" | grep "üìÑ Build file URL:" | sed 's/.*üìÑ Build file URL: //')
                if [ -n "$ARTIFACT_URL" ]; then
                  echo "‚úÖ Extracted artifact URL: $ARTIFACT_URL"
                  echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
                  echo "artifact_size=$FILE_SIZE_BYTES" >> $GITHUB_OUTPUT
                  echo "upload_success=true" >> $GITHUB_OUTPUT
                else
                  echo "‚ö†Ô∏è Upload succeeded but couldn't extract URL"
                  echo "upload_success=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "‚ö†Ô∏è Regular upload also failed, but GitHub Artifacts is available"
                echo "upload_success=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ö†Ô∏è File too large for regular Refrigerator (${FILE_SIZE_MB}MB > 20MB)"
              echo "üì• Please use GitHub Artifacts download instead"
              echo "upload_success=false" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "‚ùå No build file found"
          echo "upload_success=false" >> $GITHUB_OUTPUT
        fi
    
    # ÎπåÎìú Í≤∞Í≥º ÏïåÎ¶º (Callback API)
    - name: üì¨ Send build callback notification
      if: always()
      env:
        BUILD_ID: ${{ github.event.client_payload.build_id }}
        BUILD_STATUS: ${{ job.status }}
        ARTIFACT_URL: ${{ steps.s3-upload.outputs.artifact_url }}
        ARTIFACT_SIZE: ${{ steps.s3-upload.outputs.artifact_size }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        API_KEY: "daiughiuWASDFdsafiwkebijk112319dwshab"
        CALLBACK_URL: "https://system.withcookie.com/api/app-builder/github/callback"
      run: |
        echo "üì¨ Sending build callback notification..."
        echo "  Build ID: $BUILD_ID"
        echo "  Status: $BUILD_STATUS"
        
        # Prepare payload based on build status
        if [ "$BUILD_STATUS" = "success" ]; then
          # Success payload
          if [ -n "$ARTIFACT_URL" ]; then
            PAYLOAD=$(cat <<EOF
        {
          "buildId": "$BUILD_ID",
          "status": "success",
          "artifactUrl": "$ARTIFACT_URL",
          "artifactSize": ${ARTIFACT_SIZE:-0},
          "githubRunId": $GITHUB_RUN_ID
        }
        EOF
        )
          else
            # Success but no S3 upload (GitHub Artifacts only)
            PAYLOAD=$(cat <<EOF
        {
          "buildId": "$BUILD_ID",
          "status": "success",
          "githubRunId": $GITHUB_RUN_ID,
          "message": "Build successful. Download from GitHub Artifacts."
        }
        EOF
        )
          fi
        else
          # Failure payload
          ERROR_MESSAGE="Build failed with status: $BUILD_STATUS"
          PAYLOAD=$(cat <<EOF
        {
          "buildId": "$BUILD_ID",
          "status": "failure",
          "error": "$ERROR_MESSAGE",
          "githubRunId": $GITHUB_RUN_ID
        }
        EOF
        )
        fi
        
        # Remove whitespace and newlines from payload for clean JSON
        PAYLOAD_CLEAN=$(echo "$PAYLOAD" | tr -d '\n' | sed 's/  */ /g')
        echo "  Payload: $PAYLOAD_CLEAN"
        
        # Send callback with API key
        HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$CALLBACK_URL" \
          -H "Content-Type: application/json" \
          -H "x-api-key: $API_KEY" \
          -d "$PAYLOAD_CLEAN")
        
        HTTP_CODE=$(echo "$HTTP_RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | head -n-1)
        
        echo "  Response Code: $HTTP_CODE"
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "204" ]; then
          echo "‚úÖ Callback notification sent successfully"
        else
          echo "‚ö†Ô∏è Callback notification failed (HTTP $HTTP_CODE)"
          echo "  Response: $RESPONSE_BODY"
        fi
        
        echo "üèÅ Build process completed with status: $BUILD_STATUS"
    
    # ÏïÑÌã∞Ìå©Ìä∏ Ï†ÄÏû• (ÎîîÎ≤ÑÍ∑∏Ïö©)
    - name: üìÅ Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ steps.fetch-config.outputs.PLATFORM || github.event.client_payload.platform || 'android' }}-${{ github.event.client_payload.build_id || 'test-build' }}
        path: |
          android/app/build/outputs/**/*.apk
          android/app/build/outputs/**/*.aab
          ios/build/*.ipa
        if-no-files-found: ignore
        retention-days: 7